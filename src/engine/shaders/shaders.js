THREE.ShaderChunk.landscape_frag = [
	"uniform sampler2D channel0;",
	"uniform sampler2D channel1;",
	"uniform sampler2D channel2;",
	"uniform sampler2D channel3;",
	"uniform sampler2D blendMap;",
	"uniform float scale;",
	"varying vec3 vPosition;",
	"varying vec2 vUv;",
	"uniform vec3 diffuse;",
	"uniform vec3 emissive;",
	"uniform float opacity;",
	"varying vec3 vLightFront;",
	"#ifdef DOUBLE_SIDED",
	"	varying vec3 vLightBack;",
	"#endif",
	"#include <common>",
	"#include <color_pars_fragment>",
	"#include <uv_pars_fragment>",
	"#include <uv2_pars_fragment>",
	"#include <map_pars_fragment>",
	"#include <alphamap_pars_fragment>",
	"#include <aomap_pars_fragment>",
	"#include <lightmap_pars_fragment>",
	"#include <emissivemap_pars_fragment>",
	"#include <envmap_pars_fragment>",
	"#include <bsdfs>",
	"#include <lights_pars>",
	"#include <fog_pars_fragment>",
	"#include <shadowmap_pars_fragment>",
	"#include <shadowmask_pars_fragment>",
	"#include <specularmap_pars_fragment>",
	"#include <logdepthbuf_pars_fragment>",
	"void main() {",
	"	vec4 diffuseColor = vec4( diffuse, opacity );",
	"	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
	"	vec3 totalEmissiveRadiance = emissive;",
	"	#include <logdepthbuf_fragment>",
	"	#include <map_fragment>",
	"	vec4 splat = texture2D(blendMap, vUv);",
	"	vec4 color = mix(texture2D(channel0, vUv.xy*scale), texture2D(channel1, vUv.xy*scale), splat.r);",
	"	color = mix(texture2D(channel2, vUv.xy*scale), color, splat.r);",
	"	color = mix(texture2D(channel3, vUv.xy*scale), color, splat.g);",
	"	// vec4 foo = vec4( outgoingLight, diffuseColor.a );",
	"	vec4 texelColor = color;",
	"	texelColor = mapTexelToLinear( texelColor );",
	"	diffuseColor *= texelColor;",
	"	#include <color_fragment>",
	"	#include <alphamap_fragment>",
	"	#include <alphatest_fragment>",
	"	#include <specularmap_fragment>",
	"	#include <emissivemap_fragment>",
	"	// accumulation",
	"	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );",
	"	#include <lightmap_fragment>",
	"	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );",
	"	#ifdef DOUBLE_SIDED",
	"		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;",
	"	#else",
	"		reflectedLight.directDiffuse = vLightFront;",
	"	#endif",
	"	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();",
	"	// modulation",
	"	#include <aomap_fragment>",
	"	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;",
	"	#include <envmap_fragment>",
	"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
	"	#include <premultiplied_alpha_fragment>",
	"	#include <tonemapping_fragment>",
	"	#include <encodings_fragment>",
	"	#include <fog_fragment>",
	"	// gl_FragColor = texture2D(channel0, vUv.xy);",
	"	// gl_FragColor = color;",
	"	// gl_FragColor = vec4(vUv,1, 0);",
	"}"].join("\n");
THREE.ShaderChunk.landscape_vert = [
	"#define LAMBERT",
	"varying vec3 vLightFront;",
	"varying vec2 vUv;",
	"varying vec3 vPosition;",
	"#ifdef DOUBLE_SIDED",
	"	varying vec3 vLightBack;",
	"#endif",
	"#include <common>",
	"#include <uv_pars_vertex>",
	"#include <uv2_pars_vertex>",
	"#include <envmap_pars_vertex>",
	"#include <bsdfs>",
	"#include <lights_pars>",
	"#include <color_pars_vertex>",
	"#include <morphtarget_pars_vertex>",
	"#include <skinning_pars_vertex>",
	"#include <shadowmap_pars_vertex>",
	"#include <logdepthbuf_pars_vertex>",
	"uniform sampler2D heightMap;",
	"uniform float bumpScale;",
	"varying float vAmount;",
	"attribute float height;",
	"void main() {",
	"	vUv = uv;",
	"  vPosition = position;",
	"	#include <uv_vertex>",
	"	#include <uv2_vertex>",
	"	#include <color_vertex>",
	"	#include <beginnormal_vertex>",
	"	#include <morphnormal_vertex>",
	"	#include <skinbase_vertex>",
	"	#include <skinnormal_vertex>",
	"	#include <defaultnormal_vertex>",
	"	#include <begin_vertex>",
	"	#include <morphtarget_vertex>",
	"	#include <skinning_vertex>",
	"	#include <project_vertex>",
	"	#include <logdepthbuf_vertex>",
	"	#include <worldpos_vertex>",
	"	#include <envmap_vertex>",
	"	#include <lights_lambert_vertex>",
	"	#include <shadowmap_vertex>",
	"}"].join("\n");
